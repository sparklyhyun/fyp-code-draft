package fyp_algo;

import java.util.ArrayList;
import java.util.Random;
import fyp_algo.Constants.*;

public class Greedy {

	private ArrayList<Agv> idleAgv;
	private ArrayList<Containers> containers;
	private ArrayList<Containers> q_yc1, q_yc2, q_yc3, q_yc4, q_qc_unload;
	
	public Greedy(ArrayList<Agv> idleAgv, ArrayList<Containers> containers, ArrayList<Containers> q_yc1,
			ArrayList<Containers> q_yc2, ArrayList<Containers> q_yc3, ArrayList<Containers> q_yc4, 
			ArrayList<Containers> q_qc_unload)
	{
		this.idleAgv = idleAgv;
		this.containers = containers;
		this.q_yc1 = q_yc1;
		this.q_yc2 = q_yc2;
		this.q_yc3 = q_yc3;
		this.q_yc4 = q_yc4;
	}
	
	public void findNearest(Agv agv){
		//CRANETYPE = {"YC1", "YC2", "YC3", "YC4", "QC_LOAD", "QC_UNLOAD"}
		/* ctrol point yc1 - check yc1 first, if queue not empty. then others - queue not empty && no one on that index
		 * 
		 * */
		String c = agv.getCtrlPt();
		switch(c){
		case "YC1": checkYC1(agv); break;
		case "YC2": checkYC2(agv); break;
		case "YC3": checkYC3(agv); break;
		case "YC4": checkYC4(agv); break;
		case "QC_LOAD": checkQCLoad(agv); break;
		case "QC_UNLOAD": checkQCUnload(agv); break;
		default: checkNull(agv); break;
		}
	}
	
	public void checkYC1(Agv agv){
		if(q_yc1.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc2.isEmpty() == false){
				
			}else if(q_yc3.isEmpty() == false){
				
			}else if(q_qc_unload.isEmpty() == false){
				
			}else if(q_yc4.isEmpty() == false){
				
			}
	}
	
	public void checkYC2(Agv agv){
		if(q_yc2.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc3.isEmpty() == false){
				
			}else if(q_yc4.isEmpty() == false){
				
			}else if(q_qc_unload.isEmpty() == false){
				
			}else if(q_yc1.isEmpty() == false){
				
			}
	}
	
	public void transportContainer(Agv agv, ArrayList<Containers> container){
		Containers c = container.get(0); //get the first container in line
		containers.remove(0);	//remove the first object from queue
		idleAgv.remove(agv); 	//remove agv from idle queue 
		int dropOffx = c.getDropOffx();
		int dropOffy = c.getDropOffy();
		agv.setDropx(dropOffx);;
		agv.setDropy(dropOffy);
		if(Constants.AGV_POS[dropOffy][dropOffx] == 1){
			//wait for 1 unit 
		}
		
		//move agv around 
		/*
		Constants.AGV_POS[agv.getAgvy()][agv.getAgvx()] = 0;	//agv no longer at its position

		Constants.AGV_POS[dropOffy][dropOffx] = 1;	//now the agv occupying new position 
		idleAgv.add(agv); 	//add the now idle agv to the back of the array 
		*/
		
		
	}
	
	public void checkYC3(Agv agv){
		if(q_yc3.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc4.isEmpty() == false){
				
			}else if(q_qc_unload.isEmpty() == false){
				
			}else if(q_yc1.isEmpty() == false){
				
			}else if(q_yc2.isEmpty() == false){
				
			}
	}
	
	public void checkYC4(Agv agv){
		if(q_yc4.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_qc_unload.isEmpty() == false){
				
			}else if(q_yc1.isEmpty() == false){
				
			}else if(q_yc2.isEmpty() == false){
				
			}else if(q_yc3.isEmpty() == false){
				
			}
	}
	
	public void checkQCLoad(Agv agv){
		if(q_qc_unload.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc1.isEmpty() == false){
				
			}else if(q_yc2.isEmpty() == false){
				
			}else if(q_yc3.isEmpty() == false){
				
			}else if(q_yc4.isEmpty() == false){
				
			}
	}
	
	public void checkQCUnload(Agv agv){
		if(q_yc1.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc2.isEmpty() == false){
				
			}else if(q_yc3.isEmpty() == false){
				
			}else if(q_yc4.isEmpty() == false){
				
			}else if(q_qc_unload.isEmpty() == false){
				
			}
	}
	
	public void checkNull(Agv agv){
		if(q_qc_unload.isEmpty() == false){
			//get container, remove container, store drop off point 
			//check if the drop off point is occpied. 
				//if occupied, wait.
				//else, remove from idle queue, update coordinates to drop off point, add to back of the idle queue
			}else if(q_yc1.isEmpty() == false){
				
			}else if(q_yc2.isEmpty() == false){
				
			}else if(q_yc3.isEmpty() == false){
				
			}else if(q_yc4.isEmpty() == false){
				
			}
	}
	
	
}
