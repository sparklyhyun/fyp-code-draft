package fyp_algo;
import java.util.ArrayList;
import java.util.Random;

import fyp_algo.Constants.*;

public class Agv {
	private int agv_num;	//index of agv
	private Constants.CONTROL_PTS agv_pos;	//position of agv - which control point is it at?
	private boolean idle = true; 
	
	private ArrayList<Containers> agv_tasks = new ArrayList<>();	//list of jobs 
	
	public Agv(int agv_num){
		this.agv_num = agv_num;
		initPos();
	}
	
	private void initPos(){
		//generate initial pos (random among all the control points) 
		Random rand = null;
		int max = 5;
		int min = 0;
		int randomPos = rand.nextInt((max - min)+1) + min;
		if(Constants.INIT_AGV_POS[randomPos] == 0){
			Constants.INIT_AGV_POS[randomPos] = 1;
			agv_pos = index_ctrl_pt(randomPos);
			return;
		}else{
			initPos();	//calculate random again
		}
	}
	
	private Constants.CONTROL_PTS index_ctrl_pt(int x){
		switch(x){
		case 0: return Constants.CONTROL_PTS.YC1;
		case 1: return Constants.CONTROL_PTS.YC2;
		case 2: return Constants.CONTROL_PTS.YC3;
		case 3: return Constants.CONTROL_PTS.YC4;
		case 4: return Constants.CONTROL_PTS.QC_LOAD;
		case 5: return Constants.CONTROL_PTS.QC_UNLOAD;
		default: return Constants.CONTROL_PTS.YC1; //default value 
		}
	}
	
	public void setAgvPos(Constants.CONTROL_PTS p){
		agv_pos = p;
	}
	
	public void setIdle(boolean idle){
		this.idle = idle;
	}
	
	public int getAgvNum(){
		return this.agv_num;
	}
	
	public Constants.CONTROL_PTS getAgvPos(){
		return this.agv_pos;
	}
	
	public boolean getIdle(){
		return idle;
	}

	public boolean isTopRow(){
		if((this.agv_pos == Constants.CONTROL_PTS.QC_LOAD) || (this.agv_pos ==  Constants.CONTROL_PTS.QC_UNLOAD)){
			return true;
		}else{
			return false;
		}
	}
	
	
	public int computeDist(Containers c){
		//compute dist btw Container & this.agv_pos 
		int distance = 0;
		Constants.CONTROL_PTS c_pos = c.getPickUp();
		if(c_pos == this.agv_pos){
			return 0;
		}else{
			//next move, distance + 1
		}
		
	}
	
	public void nextPos(Constants.CONTROL_PTS p){
		
	}
	

	/*
	public int innerComputeDist(Constants.CONTROL_PTS a, Constants.CONTROL_PTS c){
		//agv must travel to container from its original position
		
	}*/
	

}
