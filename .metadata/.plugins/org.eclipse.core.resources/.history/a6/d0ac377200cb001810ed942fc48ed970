package fyp_algo;

import java.util.*;

public class Draft_greedy {
	/* AGV will be located initially at any of the control points
	 * 
	 * 
	 * */
	/*
	private ArrayList<Agv> agvList = new ArrayList<Agv>(); //contains 4 agv (for now)
	private ArrayList<Containers> containers = new ArrayList<Containers>(); //contains list of jobs
	
	//work lists 
	private ArrayList<Containers> q_yc1 = new ArrayList<>();
	private ArrayList<Containers> q_yc2 = new ArrayList<>();
	private ArrayList<Containers> q_yc3 = new ArrayList<>();
	private ArrayList<Containers> q_yc4 = new ArrayList<>();
	private ArrayList<Containers> q_qc_unload = new ArrayList<>();
	*/
	
	//global priority queue for all containers (considers pick up points)
	public static PriorityQueue<Containers> c_priority = new PriorityQueue<Containers>();
	
	//priority queue at each pick up points (considers drop off points) 
	public PriorityQueue<Containers> q_yc1 = new PriorityQueue<Containers>();
	public PriorityQueue<Containers> q_yc2 = new PriorityQueue<Containers>();
	public PriorityQueue<Containers> q_yc3 = new PriorityQueue<Containers>();
	public PriorityQueue<Containers> q_yc4 = new PriorityQueue<Containers>();
	public PriorityQueue<Containers> q_qc_unload  = new PriorityQueue<Containers>();
	

	public Draft_greedy(){
		//BFS, distance depends on the distance from the pick up location to agv
		//get the first item in the global priority queue
		
		
		//first, populate the priority queue at pick up points 
		Iterator i = c_priority.iterator();
		while(i.hasNext()){
			Containers c = i.next();	//get the next item, do not remove them first from the global queue
			pickup = c.getPickUpPoint();
			switch(pickup){
			case yc1: q_yc1.add(c); break;
			case yc1: q_yc2.add(c); break;
			case yc1: q_yc3.add(c); break;
			case yc1: q_yc4.add(c); break;
			case yc1: q_qc_unload.add(c); break;
			default: break;
			}
		}
		
		
	}
}
